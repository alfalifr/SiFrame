hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AC tag= classesTree 521960438
hasNext() nowOutput= class sidev.lib.universal.fun.AC tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AC
nowOutput!! = class sidev.lib.universal.fun.AC tag= classesTree 521960438
now.name= declaredPropertiesTree sidev.lib.universal.fun.AC
props.size= 3
getNextOutputIterator() inn= class sidev.lib.universal.fun.AC tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => true
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AC.a: kotlin.Boolean tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AC.a: kotlin.Boolean tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= a
nowOutput!! = val sidev.lib.universal.`fun`.AC.a: kotlin.Boolean tag= declaredPropertiesTree
i= 0 prop name= a
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AC.ac: kotlin.String tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AC.ac: kotlin.String tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= ac
nowOutput!! = val sidev.lib.universal.`fun`.AC.ac: kotlin.String tag= declaredPropertiesTree
i= 1 prop name= ac
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AC.acPriv: kotlin.String tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AC.acPriv: kotlin.String tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= acPriv
nowOutput!! = val sidev.lib.universal.`fun`.AC.acPriv: kotlin.String tag= declaredPropertiesTree
i= 2 prop name= acPriv
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Z tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Z
size= 0 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.Z tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => false
size= 1 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
hasNext() TESTTT asasa tag= declaredPropertiesTree
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.X tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.X
element= class sidev.lib.universal.fun.X e == element => false
element= class sidev.lib.universal.fun.X e == element => false
size= 2 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.X tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AB tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AB
element= class sidev.lib.universal.fun.AB e == element => false
element= class sidev.lib.universal.fun.AB e == element => false
element= class sidev.lib.universal.fun.AB e == element => false
size= 3 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.AB tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AB
nowOutput!! = class sidev.lib.universal.fun.AB tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.Z tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.Z tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.Z
props.size= 1
getNextOutputIterator() inn= class sidev.lib.universal.fun.Z tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => true
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.Z.a: kotlin.Boolean tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.Z.a: kotlin.Boolean tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= a
nowOutput!! = val sidev.lib.universal.`fun`.Z.a: kotlin.Boolean tag= declaredPropertiesTree
i= 3 prop name= a
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA
element= class sidev.lib.universal.fun.AA e == element => false
element= class sidev.lib.universal.fun.AA e == element => false
element= class sidev.lib.universal.fun.AA e == element => false
size= 3 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => true
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
size= 4 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
hasNext() TESTTT asasa tag= declaredPropertiesTree
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => true
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
size= 4 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => true
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
size= 4 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.Y
nowOutput!! = class sidev.lib.universal.fun.Y tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.Y tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.Y tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.Y
props.size= 0
getNextOutputIterator() inn= class sidev.lib.universal.fun.Y tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => false
size= 3 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.X tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.X
element= class sidev.lib.universal.fun.X e == element => true
element= class sidev.lib.universal.fun.X e == element => false
element= class sidev.lib.universal.fun.X e == element => false
element= class sidev.lib.universal.fun.X e == element => false
size= 4 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.X tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.X
nowOutput!! = class sidev.lib.universal.fun.X tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.X tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.X tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.X
props.size= 0
getNextOutputIterator() inn= class sidev.lib.universal.fun.X tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
element= class sidev.lib.universal.fun.Y e == element => false
size= 3 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
size= 4 existingElementIndex= 2 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
classesTree now.qualifiedName= kotlin.Any
nowOutput!! = class kotlin.Any tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.AB tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.AB tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.AB
props.size= 2
getNextOutputIterator() inn= class sidev.lib.universal.fun.AB tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => true
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AB.ab: kotlin.String tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AB.ab: kotlin.String tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= ab
nowOutput!! = val sidev.lib.universal.`fun`.AB.ab: kotlin.String tag= declaredPropertiesTree
i= 4 prop name= ab
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AB.ab_2: kotlin.String tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AB.ab_2: kotlin.String tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= ab_2
nowOutput!! = val sidev.lib.universal.`fun`.AB.ab_2: kotlin.String tag= declaredPropertiesTree
i= 5 prop name= ab_2
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA
element= class sidev.lib.universal.fun.AA e == element => true
element= class sidev.lib.universal.fun.AA e == element => false
element= class sidev.lib.universal.fun.AA e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA
element= class sidev.lib.universal.fun.AA e == element => true
element= class sidev.lib.universal.fun.AA e == element => false
element= class sidev.lib.universal.fun.AA e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
hasNext() TESTTT asasa tag= declaredPropertiesTree
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA
element= class sidev.lib.universal.fun.AA e == element => true
element= class sidev.lib.universal.fun.AA e == element => false
element= class sidev.lib.universal.fun.AA e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA
element= class sidev.lib.universal.fun.AA e == element => true
element= class sidev.lib.universal.fun.AA e == element => false
element= class sidev.lib.universal.fun.AA e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AA
nowOutput!! = class sidev.lib.universal.fun.AA tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.AA tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.AA tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.AA
props.size= 2
getNextOutputIterator() inn= class sidev.lib.universal.fun.AA tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => true
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AA.aa: kotlin.String tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AA.aa: kotlin.String tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= aa
nowOutput!! = val sidev.lib.universal.`fun`.AA.aa: kotlin.String tag= declaredPropertiesTree
i= 6 prop name= aa
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AA.dDariAA: sidev.lib.universal.`fun`.D tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AA.dDariAA: sidev.lib.universal.`fun`.D tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= dDariAA
nowOutput!! = val sidev.lib.universal.`fun`.AA.dDariAA: sidev.lib.universal.`fun`.D tag= declaredPropertiesTree
i= 7 prop name= dDariAA
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA_ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA_
element= class sidev.lib.universal.fun.AA_ e == element => false
element= class sidev.lib.universal.fun.AA_ e == element => false
size= 2 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.AA_ tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
hasNext() TESTTT asasa tag= declaredPropertiesTree
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
element= class kotlin.Any e == element => false
size= 3 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
classesTree now.qualifiedName= kotlin.Any
nowOutput!! = class kotlin.Any tag= classesTree 521960438
nowIntput= class kotlin.Any tag= declaredPropertiesTree
hasNext() input= class kotlin.Any tag= declaredPropertiesTree
now.name= declaredPropertiesTree kotlin.Any
props.size= 0
getNextOutputIterator() inn= class kotlin.Any tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => true
element= class sidev.lib.universal.fun.Y e == element => false
size= 2 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.Y
element= class sidev.lib.universal.fun.Y e == element => true
element= class sidev.lib.universal.fun.Y e == element => false
size= 2 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.Y tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.Y
nowOutput!! = class sidev.lib.universal.fun.Y tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.Y tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.Y tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.Y
props.size= 0
getNextOutputIterator() inn= class sidev.lib.universal.fun.Y tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => false
size= 1 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA_ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA_
element= class sidev.lib.universal.fun.AA_ e == element => true
element= class sidev.lib.universal.fun.AA_ e == element => false
size= 2 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA_ tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AA_
nowOutput!! = class sidev.lib.universal.fun.AA_ tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.AA_ tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.AA_ tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.AA_
props.size= 1
getNextOutputIterator() inn= class sidev.lib.universal.fun.AA_ tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => true
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AA_.aa_: kotlin.Int tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AA_.aa_: kotlin.Int tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= aa_
nowOutput!! = val sidev.lib.universal.`fun`.AA_.aa_: kotlin.Int tag= declaredPropertiesTree
i= 8 prop name= aa_
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA__
element= class sidev.lib.universal.fun.AA__ e == element => false
size= 1 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
size= 2 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
hasNext() TESTTT asasa tag= declaredPropertiesTree
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
size= 2 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
element= class kotlin.Any e == element => false
size= 2 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
classesTree now.qualifiedName= kotlin.Any
nowOutput!! = class kotlin.Any tag= classesTree 521960438
nowIntput= class kotlin.Any tag= declaredPropertiesTree
hasNext() input= class kotlin.Any tag= declaredPropertiesTree
now.name= declaredPropertiesTree kotlin.Any
props.size= 0
getNextOutputIterator() inn= class kotlin.Any tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA__
element= class sidev.lib.universal.fun.AA__ e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA__
element= class sidev.lib.universal.fun.AA__ e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AA__
nowOutput!! = class sidev.lib.universal.fun.AA__ tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.AA__ tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.AA__ tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.AA__
props.size= 1
getNextOutputIterator() inn= class sidev.lib.universal.fun.AA__ tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => true
hasNext= true tag= declaredPropertiesTree
nowOutput= val sidev.lib.universal.`fun`.AA__.aa__: kotlin.Int tag= declaredPropertiesTree
hasNext() nowOutput= val sidev.lib.universal.`fun`.AA__.aa__: kotlin.Int tag= declaredPropertiesTree
declaredPropertiesTree  getInputIterator() now.name= aa__
nowOutput!! = val sidev.lib.universal.`fun`.AA__.aa__: kotlin.Int tag= declaredPropertiesTree
i= 9 prop name= aa__
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA___
size= 0 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA___
element= class sidev.lib.universal.fun.AA___ e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
hasNext() TESTTT asasa tag= declaredPropertiesTree
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA___
element= class sidev.lib.universal.fun.AA___ e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA___
element= class sidev.lib.universal.fun.AA___ e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AA___
nowOutput!! = class sidev.lib.universal.fun.AA___ tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.AA___ tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.AA___ tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.AA___
props.size= 0
getNextOutputIterator() inn= class sidev.lib.universal.fun.AA___ tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA____ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA____
size= 0 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class sidev.lib.universal.fun.AA____ tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class sidev.lib.universal.fun.AA____ tag= classesTree 521960438
addIfAbsent element= class sidev.lib.universal.fun.AA____
element= class sidev.lib.universal.fun.AA____ e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class sidev.lib.universal.fun.AA____ tag= classesTree 521960438
classesTree now.qualifiedName= sidev.lib.universal.fun.AA____
nowOutput!! = class sidev.lib.universal.fun.AA____ tag= classesTree 521960438
nowIntput= class sidev.lib.universal.fun.AA____ tag= declaredPropertiesTree
hasNext() input= class sidev.lib.universal.fun.AA____ tag= declaredPropertiesTree
now.name= declaredPropertiesTree sidev.lib.universal.fun.AA____
props.size= 0
getNextOutputIterator() inn= class sidev.lib.universal.fun.AA____ tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
size= 0 existingElementIndex= -1 canAdd= true
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= true tag= classesTree 521960438
nowOutput= class kotlin.Any tag= classesTree 521960438
addIfAbsent element= class kotlin.Any
element= class kotlin.Any e == element => true
size= 1 existingElementIndex= 0 canAdd= false
hasNext() nowOutput= class kotlin.Any tag= classesTree 521960438
classesTree now.qualifiedName= kotlin.Any
nowOutput!! = class kotlin.Any tag= classesTree 521960438
nowIntput= class kotlin.Any tag= declaredPropertiesTree
hasNext() input= class kotlin.Any tag= declaredPropertiesTree
now.name= declaredPropertiesTree kotlin.Any
props.size= 0
getNextOutputIterator() inn= class kotlin.Any tag= declaredPropertiesTree
outItr != null => true outItr.hasNext() => false
hasNext() TESTTT tag= declaredPropertiesTree
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= false tag= classesTree 521960438
isHasNextOnlyCheck= true tag= classesTree 521960438
hasNext= false tag= classesTree 521960438
hasNext= false tag= declaredPropertiesTree